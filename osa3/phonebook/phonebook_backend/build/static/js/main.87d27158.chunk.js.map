{"version":3,"sources":["components/Filter.js","components/Notification.js","components/PersonForm.js","components/Persons.js","services/persons.js","App.js","index.js"],"names":["Filter","filter","filterChange","value","onChange","Notification","message","error","className","PersonForm","submit","nameChange","name","numberChange","number","onSubmit","type","Persons","persons","remove","personList","map","person","key","onClick","id","url","axios","get","then","response","data","newPerson","post","delUrl","delete","put","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notification","setNotification","notificationType","setType","useEffect","personService","initialList","notify","setTimeout","personsToShow","toLowerCase","includes","e","target","preventDefault","exists","forEach","window","confirm","find","p","changedPerson","returnedPerson","catch","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87d27158.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ filter, filterChange }) => {\n  return (\n    <div>\n      <label>Filter shown with </label>\n      <input value={filter} onChange={filterChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst Notification = ({ message, error }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={'' + (error ? 'error' : 'notice')}>{message}</div>;\n};\n\nexport default Notification;\n","import React from 'react';\n\nconst PersonForm = ({ submit, nameChange, name, numberChange, number }) => {\n  return (\n    <>\n      <h3>Add a new</h3>\n      <form onSubmit={submit}>\n        <div>\n          <label>Name: </label>\n          <input value={name} onChange={nameChange} />\n        </div>\n        <div>\n          <label>Number: </label>\n          <input value={number} onChange={numberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ persons, remove }) => {\n  const personList = persons.map(person => (\n    <p key={person.name}>\n      {person.name} {person.number}{' '}\n      <button onClick={remove(person.id, person.name)}>Delete</button>\n    </p>\n  ));\n\n  return <>{personList}</>;\n};\n\nexport default Persons;\n","import axios from 'axios';\nconst url = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(url);\n  return request.then(response => {\n    return response.data;\n  });\n};\n\nconst create = newPerson => {\n  const request = axios.post(url, newPerson);\n  return request.then(response => {\n    return response.data;\n  });\n};\n\nconst update = (id, newPerson) => {\n  const request = axios.put(`${url}/${id}`, newPerson);\n  return request.then(response => {\n    return response.data;\n  });\n};\n\nconst remove = id => {\n  const delUrl = `${url}/${id}`;\n  const request = axios.delete(delUrl);\n  return request.then(response => {\n    return response.data;\n  });\n};\n\nexport default {\n  getAll,\n  create,\n  remove,\n  update\n};\n","import React, { useEffect, useState } from 'react';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setType] = useState(false);\n\n  const effectHook = () => {\n    personService.getAll().then(initialList => {\n      setPersons(initialList);\n    });\n  };\n\n  useEffect(effectHook, []);\n\n  const notify = (message, error) => {\n    setType(error);\n    setNotification(message);\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  const onNameChange = e => {\n    setNewName(e.target.value);\n  };\n\n  const onNumberChange = e => {\n    setNewNumber(e.target.value);\n  };\n\n  const onFilterChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const submitPerson = e => {\n    e.preventDefault();\n    let exists = false;\n    persons.forEach(person => {\n      if (newName === person.name) {\n        exists = true;\n      }\n    });\n\n    if (exists) {\n      const confirm = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n\n      if (confirm) {\n        const person = persons.find(p => p.name === newName);\n        const changedPerson = { ...person, number: newNumber };\n        personService\n          .update(person.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(\n              persons.map(person =>\n                person.id !== changedPerson.id ? person : returnedPerson\n              )\n            );\n            notify(`Changed ${person.name}'s number to ${newNumber}`, false);\n          })\n          .catch(() => {\n            notify(\n              `Information of ${person.name} has already been removed from the server`,\n              true\n            );\n          });\n      }\n    } else {\n      const person = {\n        name: newName,\n        number: newNumber\n      };\n      personService\n        .create(person)\n        .then(newPerson => {\n          setPersons(persons.concat(newPerson));\n          notify(`Added ${newName}`, false);\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(error => {\n          notify(error.response.data.error, true);\n        });\n    }\n  };\n\n  const removePerson = (id, name) => () => {\n    const confirm = window.confirm(`Delete ${name}?`);\n\n    if (confirm) {\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id));\n          notify(`${name} succesfully removed.`, false);\n        })\n        .catch(() => {\n          notify(\n            `Information of ${name} has already been removed from the server`,\n            true\n          );\n        });\n    }\n  };\n\n  const personsToShow =\n    filter === ''\n      ? persons\n      : persons.filter(person =>\n          person.name.toLowerCase().includes(filter.toLowerCase())\n        );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} error={notificationType} />\n      <Filter filter={filter} filterChange={onFilterChange} />\n      <PersonForm\n        submit={submitPerson}\n        nameChange={onNameChange}\n        numberChange={onNumberChange}\n        name={newName}\n        number={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} remove={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}